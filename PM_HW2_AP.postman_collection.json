{
	"info": {
		"_postman_id": "eff3e986-35b8-4406-8309-610c3577d561",
		"name": "PM_HW2_AP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Response name is myName\", function () {\r",
							"        pm.expect(jsonResponse.name).to.eql('Andrey');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Response age is equal to myAge\", function () {\r",
							"        pm.expect(jsonResponse.age).to.eql('38');\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Response salary is equal to mySalary\", function () {\r",
							"        pm.expect(jsonResponse.salary).to.eql(60000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const jsonRequest = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Request name = Response name\", function () {\r",
							"        pm.expect(jsonResponse.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Request age = Response age\", function () {\r",
							"        pm.expect(jsonResponse.age).to.eql(jsonRequest.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Request salary = Response salary\", function () {\r",
							"        pm.expect(jsonResponse.salary).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log (jsonResponse.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Request salary *4 = Response u_salary_1_5_year\", function () {\r",
							"        pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql((jsonRequest.salary*4));\r",
							"\r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Андрей",
							"type": "default"
						},
						{
							"key": "age",
							"value": "38",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "60000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonResponse = pm.response.json();\r",
							"   \r",
							"// 4. Спарсить request.\r",
							"const query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name = Request name\", function () {\r",
							"        pm.expect(jsonResponse.name).to.eql(query.name);\r",
							"    });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"        pm.expect(jsonResponse.age).to.eql(query.age);\r",
							"    });\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Response salary = Request salary\", function () {\r",
							"        pm.expect(jsonResponse.salary).to.eql(+query.salary);\r",
							"    });\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log (jsonResponse.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name property\", function () {\r",
							"         pm.expect(jsonResponse.family.pets.dog).to.have.property('name');\r",
							"    });\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age property\", function () {\r",
							"         pm.expect(jsonResponse.family.pets.dog).to.have.property('age');\r",
							"    });\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dogs name is Luky\", function () {\r",
							"         pm.expect(jsonResponse.family.pets.dog.name).to.be.eql('Luky');\r",
							"    });\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dogs  age is 4\", function () {\r",
							"         pm.expect(jsonResponse.family.pets.dog.age).to.be.eql(4);\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrey&age=38&salary=60000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "60000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonResponse = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const query = {}\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Resposne name = Request name\", function () {\r",
							"    pm.expect(jsonResponse.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Resposne age = Request age\", function () {\r",
							"    pm.expect(jsonResponse.age).to.eql(+query.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log (query.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log (jsonResponse.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (jsonResponse.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (jsonResponse.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (jsonResponse.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Resposne salary [0] = Request salary\", function () {\r",
							"    pm.expect(jsonResponse.salary[0]).to.eql(+query.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Resposne salary [1] = Request salary*2\", function () {\r",
							"    pm.expect(+jsonResponse.salary[1]).to.eql(query.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Resposne salary [2] = Request salary*3\", function () {\r",
							"    pm.expect(+jsonResponse.salary[2]).to.eql(query.salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// Создаем переменные через интерфейс Postman\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Andrey\");\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"38\");\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"60000\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonResponse.salary.forEach (item => {console.log (item)})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andrey&age=38&salary=60000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "60000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const jsonRequest = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has 'start_qa_salary' property\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property('start_qa_salary');\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has 'qa_salary_after_6_months' property\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has 'qa_salary_after_12_months' property\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response has 'qa_salary_after_1.5_year' property\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has 'qa_salary_after_3.5_years' property\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has 'person' property\", function () {\r",
							"    pm.expect(jsonResponse).to.have.property('person');\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response 'start_qa_salary' = request 'salary'\", function () {\r",
							"    pm.expect(jsonResponse.start_qa_salary).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response 'start_qa_salary' = request 'salary'\", function () {\r",
							"    pm.expect(jsonResponse.start_qa_salary).to.eql(+jsonRequest.salary);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Response 'qa_salary_after_12_months' = request 'salary'*2.7\", function () {\r",
							"    pm.expect(jsonResponse.qa_salary_after_12_months).to.eql(jsonRequest.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Response 'qa_salary_after_1.5_year' = request 'salary'*3.3\", function () {\r",
							"    pm.expect(jsonResponse['qa_salary_after_1.5_year']).to.eql(jsonRequest.salary * 3.3);  \r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Response 'qa_salary_after_3.5_years' = request 'salary'*3.8\", function () {\r",
							"    pm.expect(jsonResponse['qa_salary_after_3.5_years']).to.eql(jsonRequest.salary * 3.8);  \r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}